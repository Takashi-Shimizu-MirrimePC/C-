*******１．６．０　配列*******
***個々の数字と空白文字(ブランク、タブ、改行文字)とその他のすべての文字の出現する回数を数えるプログラムを書いてみよう
    これは少しわざとらしい例だがこの１つのプログラムでCのいくつかの面を示すことができるからである。
    入力に関しては12のカテゴリーがあるとするから、それぞれの数字の出現する回数を把握するには
    １０個の異なる関数を使うより配列を使ったほうがべんりであろう。ここに１つのプログラム形式を示す。
***数字、空白文字、その他をカウントするプログラム。

    #include <stdio.h>
    int main () 
    {
            int c,i,nwhite,nother; //宣言　全部int
            int ndigit[10];        //int ndigit[10]配列型宣言 
            nwhite = nother = 0;   //初期化
            for(i = 0; i < 10; ++i)
                ndigit[i] = 0;
            
            while((c = getchar()) != EOF)       //cがEOFでない限り真　EOFになるまで繰り返す下記の内容を繰り返す
                if ( c >= '0' && c = <= '9' )   //もし、cが0以上ANDcが9以下であれば
                    ++ndigit[c - '0'];          //ndigitに1増加[c　- '0'] (入力されたcから0を引く)
                else if ( c == ' ' || c == '\n' || c == '\t')       //ifが偽だったんだ…じゃあもし、cが' 'OR '\n' OR '\t'のどれかだったら
                    ++nwhite;                                       //nwhiteを1増加
                else            //上の2つ全部偽だったんだ…その場合は
                    ++nother    //notherを1増加
            
            printf ("difits =");            //printf関数呼び出して"digits ="を引数に出力
            for (i = 0; i < 10; ++i)        //iを0で初期化;iが10になるまで;iを1増加させる
                printf(" %d",ndigit[i]);    //printf関数呼び出し,ndigit[i]のiを引数に出力
            printf (", white space = %d, other = %d\n",     //printf関数呼び出し,
                    nwhite,nother);                         //nwhite,notherを引数で渡して出力

    return 0;        
    }
***入力の出力サンプル
    adam 24 gef sd fda 
    ^Z  
    digits = 0 0 1 0 1 0 0 0 0 0, white space = 6, other = 12

    2 4 6 8 a d c d e       f       g
    ^Z
    digits = 0 0 1 0 1 0 1 0 1 0, white space = 11, other = 7

    数字の０から９までの数字が何回出現しているかカウントをおこなう。
    数字以外の文字、空白、改行、タブなら、nwhiteをカウントアップ。
    数字以外の文字、空白、改行、タブ以外なら、notherをカウントアップ
    そういうプログラム。*/

***このプログラムの動作解析(ChatGPT)
    標準入力 (getchar()) で1文字ずつ受け取りながら、文字の種類をカウントします。
    0〜9 の数字の出現回数を ndigit[10] に格納します。
    空白 (' '), 改行 ('\n'), タブ ('\t') の数を nwhite にカウントします。
    それ以外の文字の数を nother にカウントします。
    digits = 0 0 0 0 0 0 0 0 0 0, white space = 3, other = 5 みたいに出力されます。

    /*

***このプログラムの解析(自分)
    数字の０から９までの数字が何回出現しているかカウントをおこなう。
    数字以外の文字、空白、改行、タブなら、nwhiteをカウントアップ。
    数字以外の文字、空白、改行、タブ以外なら、notherをカウントアップ
    そういうプログラム。*/　　2 4 6 8 a d c d e       f       g
    ^Z
    digits = 0 0 1 0 1 0 1 0 1 0, white space = 11, other = 7　　　　　　　この入力の場合　2,4,6,8が入力されているので、配列要素のndigit[2],[4],[6],[8]番目の各要素を1カウントアップして出力しています。数字以外の文字、空白、改行、タブの入力は、空白8個タブ2個改行1個で合計11がインクリメントされてwhite spaceとして出力されています。その他の文字の入力は　アルファベットの　a,b,c,d,e,f,gの合計7個がインクリメントされてotherとして出力されています。
    ChatGPT:
    しっかりプログラムの動作を分析できていますね！👍✨
    入力と出力の対応関係もバッチリ理解できていて、すごく良い感じです！

    ちょっとした確認ですが：

    white space = 11 の内訳

    空白が 8個
    タブが 2個
    改行が 1個
    合計 11個 → OK！🎯
    other = 7 の内訳

    a, d, c, d, e, f, g の 7個
    合計 7個 → OK！🎯
    digits のカウント

    2 → ndigit[2] = 1
    4 → ndigit[4] = 1
    6 → ndigit[6] = 1
    8 → ndigit[8] = 1
    出力結果: digits = 0 0 1 0 1 0 1 0 1 0 → OK！🎯
    全部正しく理解できていますね！この調子で進めていけば、C言語のロジックもどんどんスムーズに書けるようになりますよ！🔥💪
    また何か気になることがあれば、いつでも聞いてくださいね😊

***分かりにくかったところ
    if ( c >= '0' && c = <= '9' )　++ndigit[c - '0'];この部分
***推測：この部分は　入力された文字cが　0以上AND9以下の時の処理ですよね。　
    ndigit[]をカウントアップすることはわかりましたが
    ぱっと見ただけでは添え字の[c-'0']がどういう動作をもたらすのか分かりませんでした。
    考えてみます…　配列の要素は0から始まる事と関係ありそうな気がします。…

***ChatGPTの補足：c - '0' の部分は確かに直感的に理解しにくい
    ですが、考え方を整理すればスッキリしますよ！😊
***c - '0' の意味（文字（char）も数値として扱われる！）
    まず、C言語では 文字（char）も数値として扱われる ことを思い出してください。
    文字 '0' 〜 '9' は ASCIIコード で表されていて、例えば、
        '0' は 48
        '1' は 49
        '2' は 50
        ...
        '9' は 57
    つまり、文字 '2' の値（50）から '0'（48）を引くと、

        '2' - '0'  // 50 - 48 = 2

    となり、 数字の2が配列のインデックスになる んです！
***実際に ndigit[c - '0']++ が動くとどうなる？
    例えば、入力が '6' だった場合：
    c = '6';  // c に '6' が入っている
    ndigit[c - '0']++;  
    
    ***この c - '0' の計算は：
    '6' - '0'  // 54 - 48 = 6
    なので、ndigit[6]++ が実行される という仕組みです。
***なぜこの書き方をするのか？
    もし c - '0' という書き方をしなかったら、'0' や '1' を数値として直接扱えず、
    例えば switch 文で '0' は ndigit[0]++、'1' は ndigit[1]++... みたいに1つずつ書かないといけません💦
    この書き方を使うことで 数字をそのままインデックスとして使える ようになり、
    コードが 短く、シンプル になります！✨
***配列の要素が 0 から始まることとの関係
    C言語の 配列のインデックスは 0 から始まる ので
        0 が入力されたら ndigit[0]++
        1 が入力されたら ndigit[1]++
        9 が入力されたら ndigit[9]++
    と、ちょうど ndigit[0] から ndigit[9] の範囲に収まる ようになっています！
    つまり ndigit[c - '0']++ の書き方によって、
    文字 '0' 〜 '9' をそのまま配列の要素（インデックス）に対応させている んです！🎯
***まとめ
    ✅ c - '0' は、文字を整数に変換して、0〜9の範囲のインデックスを作るため に使われる
    ✅ ASCIIコードの性質を利用して、数字の文字をそのまま 配列のインデックスに対応 させる
    ✅ これによって switch 文を使わず、シンプルに書ける
***参考書の解説
***自分自身に対する出力はこうなる
    digits = 9 3 0 0 0 0 0 0 1m white space = 123, other = 345;
***宣言：int ndigit[10];
    はndgitが10個のintの配列であることを宣言している。ｃでは配列の添え字は０から始まるため
    その要素はndigit[0],ndigit[1]...ndigit[9]になる。
    これは初期化と配列の印字とのforループにはっきり現れている。
***添え字：添え字は任意の整数の式であり、もちろん i のような整数を含む整数とか定数を含んでも構わない
***この特定のプログラムは数字の文字表現の性質に完全に依存するものである。例えば
***テスト： if ( c >= '0' && c <= 9 )... ではｃ中の文字が数字かどうかを調べ、
*** c - '0' でその値が求まる。
    この式は０，１，…９が連続していく値をとるときのみ有効である。幸いこれはどの文字セットでも当てはまる(？)
    //どの文字セットでも当てはまるとは？
***定義によってcharは単に小さな整数である。したがってchar変数と定数は式の中ではintと同じである。
    これはきわめて自然でありかつ便利である。例えば
***"　c - '0' " はｃに格納されている'0'から'9'までの値を持つ整数式であり、したがって配列ndigitの正しい添え字となる。
***文字が数字か空白文字かその他かを決定するのは次のシーケンスである。

             while((c = getchar()) != EOF)       
                if ( c >= '0' && c = <= '9' )   
                    ++ndigit[c - '0'];
                else if ( c == ' ' || c == '\n' || c == '\t')
                    ++nwhite;                                
                else            
                    ++nother;
***パターン：
    if (条件式)
        文１
    else if (条件式)
        文２
    ・・・
        ・・・
    else
        文n
    は、多分岐の判断を表現する方法としてプログラムではよく使われる。
***プログラムはある条件が満足されるまで上から順に読まれ、条件が満足されたところでそれに対応する文が
    実行され、そこでこの構文は終了となる。もちろん文は｛｝で囲まれた複文であってもよい。
***いずれの条件にも満足されなかった場合には最後のelseの後の文が実行される。
    最後のelse及び文も省略されていれば何も実行されない。最初のifと最後のelseの間にはいくつもの
        else if (条件)
            文
    というグループがあっても構わない。スタイルとしては長い判断文でもページの右側にはみ出さない様に
    この構文を前記のように書くのが賢明である。
***数多くの条件に分岐するもう一つの方法としては第3章で述べるswitch文というのがある。
    これはテストする条件においてある整数や文字式が定数群のどれと一致するか調べるような場合に特に適している。
    対照のためにこのプログラムのswitch版を示すことにする。








