*******ファイルの複写*******
***getcharとputcherがあれば入出力について何も知らなくても役に立つ
    プログラムをかなりたくさん書くことができる？
    最も単純な例は、入力を出力へ1文字ずつ複写(コピー)するプログラムである。
***1文字をとってくる
    while（文字がファイルの終わりではない）
        読み込んだばかりの文字を出力
        新しい文字をとってくる
***これをCプログラムで表現すると以下のようになる
***#include <stdio.h>
    int main ()
    {
        int c;
        c=getchar();
        while ( c != EOF ){ //関係演算子　！=　等しくないという意味
            putchar(c);
            c = getchar();
        }
    }
***ｷｰﾎﾞｰﾄﾞや画面の上で文字として扱われるものは他のデータと同じく内部的には単にビットパターン
    として格納される。そうした文字データの格納は特にchar型が設けられているが
    任意の整数型も扱える。われわれがintを使うのには微妙だが重要な理由がある
***問題は入力の終わりと正しいデータをどう区別するかである。その解決にはこれ以上入力がないという
    時にはgetcharで特別な値、どの文字とも決して混同されることのない値、を返すようにするのが良い
    この値を
***ＥＯＦ（end of file）と呼ぶ。われわれはｃを、getcharが返す任意の値を保持するのに
    十分大きな型に宣言しなければならない。
    このｃは任意の可能なcharに加えてEOFを保持するのに十分大きくなければならないから
    char型とするのは不可能である。そこでintを使うのである。
***☆EOFはどの有効な文字コードとも一致しない値
***ＥＯＦは<stdio.h>で定義されている整数である。しかし、それがどのchar値とも同じでないものも
    ありさえすればその具体的な数値は問題にする必要がない？
    記号定数を使うことにすれば、プログラムでは具体的な数値には何も左右されないことが保証される
？？？？？？？
***複写を行うプログラムは経験のあるCプログラマなら実際にもっと短く書けるであろうｃでは
***　c = getchar()
    といった任意の代入文は式であり値をもつ。この値は、代入後の左辺の値である。
    ｃへの文字の代入をwhileのテスト部分の中に入れることにすれば、ファイルを複写するプログラム
    は次のように書ける
***     #include <stdio.h>
        int main()
        {
            int c;

            while (( c = getchar()) != EOF)
                putchar( c );
        }
***このプログラムでは文字を一つ取ってｃに代入した後、その文字がファイルの終わりの目印かどうか
    をwhileで調べている。目印でなければwhileの本体が実行され、その文字が印字される。
    こうしてwhileは繰り返される。
    入力が最後に終わりとなるとこのwhileは終わりとなり、したがってmainも終わりとなる。
***このプログラムは入力を1カ所にまとめている。―――いまやgetcharの呼び出しは1つしかない―――から
    短くなっている。できたプログラムはより簡潔になりこの慣用句をマスターしてしまえば読みやすくもなる。
    このスタイルはこれからもよく出てくる。
***但しこれを使いすぎると分かりにくいプログラムとなってしまう。
    これは我々がなくしたいと思っている傾向である(よく出てくるのになくしたいんかい✋)
***条件文の中の代入文を囲む括弧は必要である。
***!=の優先順位は=より高いため、括弧がないと関係!=の吟味が代入＝より先におこなわれてしまうので㌃
    したがって、
*** c = getchar() != EOF という式は
*** c = ( getchar() != EOF) と同じである？？？？？
    これではgetcharの呼び出しでファイルの終わりがきたかどうかによってｃには０か１かがセットされる
    という望ましくない結果になってしまう(これについては2章で述べる)
