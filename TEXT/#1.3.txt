*******１．３　For文*******
***特定の仕事をするためのプログラムを書くにも色々なやり方がある。温度換算プログラムを別の形に書いてみよう
***サンプルコード　whileからForに変換したもの
    #include <stdio.h>
    int main()
    {
        int fahr;

        for(fahr = 0; fahr <= 300; fahr = fahr + 20)
            printf("%3d %6.1f\n",fahr, (5.0/9.0)*(fahr - 32));
    }
***変わった点
    変数の多くを省いた。
    残ったのはfahr。
    floatだったfahrをintにしている。
    上限、下限、刻みのおおきさはfor文の定数としてのみ書いた
    摂氏の温度を求める式はprintfの3番目の引数にしてある。
***この最後の変更はCにおけるごく一般的な規則。すなわち
    ある型の変数を使うことが許される場合にはそれがどこであれ同じ型の式を使ってもいい。
    という場合の一例である。
***printfの3番目の引数は％６．１ｆに合う浮動小数点でなければならないから、任意の浮動小数点式がそこに書けるわけである。
    （printfの書式指定子がが浮動小数点の型なら、引数に浮動小数点の式を入れることができるっちゅうことで㌃）
***For文の成分
    for文はループであり、whileの一般化になっているこれを前に出てきたwhile文と比較すると
    その役割は明白的。forには；で区切られた３つの部位がある。最初の
***fahr = 0;
    ループ本体に入る前に一度だけ実行される。
***fahr <= 300;
    という部分はループを制御するテスト、すなわち条件である。この条件を評価して
    これが真であれば、ループの本体(ここでは単にprintf)が実行される。次に
***fahr = fahr + 20
    再インクリメントのステップが実行され先の条件が再び評価される。
        for(fahr = 0; fahr <= 300; fahr = fahr + 20){...}
            for(int i = 0; i < 10; i++){...}//一般的な解説に用いられるfor文
    このループは条件が偽となれば終わりとなる。
***whileと同様にこのループの本体は1つの文であってもよいし
    {　}に挟まれた一群の文であってもよい
***また、初期化、条件、インクリメントはどんな式でも許される
***whileとforの選定について、どちらでもよく、分かりやすいほうを使えばよい
    forのほうがよりコンパクトで、ループをまとめる文が一カ所にまとめておけるので、
    初期化がインクリメントと共に1つの式であって論理的に関係があるループには
    forのほうが適している。
        ***for ループは、反復回数が事前に決まっている場合に使用するのが一般的
            ループの回数が決まっている場合、または明確に定義できる場合に最適です。
                例: 配列の要素にアクセスする場合、特定の範囲内でカウントアップ/カウントダウンする場合など。
        ***while ループは、繰り返し回数が事前に決まっていない、もしくはループを実行している間に動的に決まる場合
            に使用します。条件式が最初に評価され、条件が真である限りループが実行されます。
            ループの回数が事前に決まっていない場合や、条件を満たしている間に繰り返す必要がある場合に適しています。
                例：ユーザーの入力を繰り返し受け付ける、あるいはファイルの読み込みが終了するまで繰り返すなど、
                終了条件が動的である場合に便利です。