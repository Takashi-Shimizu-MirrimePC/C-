*******１．５．３　行数のカウント******
***次のプログラムは入力行数を数えるものである。
    上に述べたように標準ライブラリでは各入力ストリームが改行で区切られた一連の形に
    なることが保証されている。したがって行を数えるには改行記号の数を数えればよい
***　サンプルプログラム　入力の行数をカウント
    #include <stdio.h>
    int main()
    {
        int c,nl;                       //cとnlの宣言
        nl = 0;                         //nlを初期化
        while ((c = getchar()) != EOF)  //（cにgetchar()代入）cが!=EOFでない限りループ
            if ( c == '\n')             //if　cが改行ならば
                ++nl;                   //nlをインクリメント
        printf ("%d\n", nl);            //nlの値を出力
    }
***このwhileの本体は1つのifでありこれはカウントアップ++nlの制御に使われている
    このif文では括弧の中の条件を調べ、それが真であれば次に続く文あるいは大カッコ内の一連の文
    を実行する。ここでも何が何を制御しているかを示すために字下げを行った。
        ***実際は{}を使うことがベストプラクティスだな✋
***ここで二重等号　＝＝　は(pascalの単一の＝あるいはFortranの.EQ.と同じく)"に等しい"
    事を表すCの記法である。この記号は代入の＝と区別するために使われる。
***次に機械の文字セットの中において、文字の内部表現に等しい値を求めるには単一の引用符で囲んで
    任意の文字を書けばよい。''
***これを文字定数と呼ぶがこれは小さな整数を書くもう一つの方法に他ならない。例えば文字定数'A'
    はASCII文字セットのなかでは65であり、これが文字Aの内部表現になっている。
    もち、65と書くより'A'と書いたほうがよい。意味がはっきりするし特定の文字セットとは独立だからである
***文字列で使われるエスケープ文字は文字定数の中でも有効である。したがって判定文や式の中でも
    '\n'は改行コードの値を表す。この値はASCIIでは１０である
    注意すべきことは'\n'が1つの文字であることで、式の中ではこれは1つの整数と等価である。
***一方対照的に(引用符と二重引用符)　"\n"はたまたま1つの文字だけを含む文字列である。
***文字列と文字については第二章で論ずる
