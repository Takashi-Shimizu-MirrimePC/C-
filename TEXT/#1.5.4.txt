*******１．５．４　単語のカウント*******
***次に第４の有用なプログラムとして行と単語と文字の個数を数えるプログラムを書いてみよう🙌
    ただしここでは単語は空白やタブや改行を含まない任意の文字の並びであるとゆるやかに定義しておく
    このプログラムはUNIXのユーティリティプログラムのWCの裸の骨格部分である（？）
***　#include <stdio.h>
     #define IN 1       //単語の中
     #define OUT 0      //単語の外
     //入力中の行、単語、字のカウント
     int main ()
     {
        int c, nl, nw, nc, state;
        state = OUT;
        nl = nw = nc = 0;
        while (( c = getchar()) != EOF ) {
            ++nc;
            if ( c = '\n' )
                ++nl;
            if ( c == ' ' || c == \n || c == '\t' )
                state = OUT;
            else if ( state == OUT ){
                state = IN;
                ++nw;
            }
        }
        printf ( "%d %d %d\n", nl, nw, nc );
     }
***このプログラムでは単語の最初の文字が来るたびにカウントを１進めている。
    変数stateは、現在みているのが単語の中かどうかを示すもので最初は単語の中ではないから値OUTを割り合てておく。
***プログラムを読みやすくするうえからいうとリテラル値１，０を使うよりはIN,OUTを使うほうが好ましい。
    こんな小さいプログラムではどうでもいいけど大きなプログラムではわかりやすさを考えると初めからこういうふうに書く
    ちょっとした労力は十分払うに値するものである。また数を記号定数としてだけ表すようにしておけばプログラムに変更を
    くわえるのがよりたやすいこともまわるであろう。次に
***nl = nw = nc = 0;という行は３つの変数全てに０をセットするものである。
    これは特殊な場合ではなく代入文に値があり、右から左に代入が行われる結果である。これは次に書くのと一緒
***nl = ( nw = ( nc = 0));
***一方演算子||はＯＲを意味するから
***if ( c == ' ' || c == \n || c == '\t' ) という行は、cが空白あるいはＣが改行あるいはＣがタブならばの意味である。
***これに対応するＡＮＤの演算子は　＆＆　である。　＆＆の優先順位は||より高い。
***＆＆あるいは||でつながれた式は左から右へ評価され、真偽が判明すると直ちに評価を止めることになっている。
    したがってＣが空白であればそれが改行かタブか判断する必要はないからそのチェックは行われない。
    これはここでは重要なことではないがすぐにわかるようにもっと複雑な場合には非常に重要となる。
***この例にはelse文も出でいるがこれはif文の条件式が儀のときに行なうべき代替行為を指定するものである。
    一般形式は次の形。
    if （式）
        文１
    else
        文２
***if-elseで指定される２つの文のうち実行されるのは一つだけである。式が真ならば文１が実行され、
    そうでなければ文２が実行される。どちらの文も単文でもよく{　}に囲まれたいくつかの文でもよい。
    先の単語数をカウントするプログラムはelseのあとの文が{　}で囲んだ２つの文を制御するif文となっている。